<#@ template Namespace="Michaelis.QuickTemplates" Name="TemplateFile" TransformMethod="GenerateMethodTemplate" Visibility="internal" Inherits="BaseTemplate" OmitGeneratedAttribute = "true" TransformMethodVisibility="private" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Michaelis.QuickTemplates.Meta" #>
<#@ parameter name="directives" type="List<TemplateDirective>" availability="method" required="true" #>
<#@ parameter name="template" type="Template" availability="method" required="true" #>
<#@ line position="PreNamespace" text="#nullable disable" #>
<#
            foreach (var dir in directives.Where(z => z.Mode == DirectiveMode.ClassCode))
            {
                ApplyDirective(dir, template, FinishLineInfoMode.Default);
            }
#>
<#= template.TransformMethodVisibility != "" ? template.TransformMethodVisibility + " " : "" #><#= template.TransformMethodAttribute != null ? template.TransformMethodAttribute + " " : "" #>void <#= template.TransformMethod #>(<# PrintMethodParameters(Meta); #>)
{
<#
            PushIndent("    ");
            foreach (var param in Meta.OfType<Parameter>().Where(z => z.Required))
            {
                if (param.Availability == ParameterAvailability.Method) {
                    WriteLine($"if (null == {param.Name}) throw new ArgumentNullException(nameof({param.Name}));");
                }
                else {
                    WriteLine($"if (!_priv_set_{param.Name}) throw new InvalidOperationException($\"{{nameof({param.Name})}} was not set\");");
                }
            }
#>
<#
            if (template.Linepragmas)
            {
                SkipIndent(); #>#line hidden
<#
            }

            foreach (var dir in directives.Where(z => z.Mode != DirectiveMode.ClassCode))
            {
                ApplyDirective(dir, template, FinishLineInfoMode.Hidden);
            }
            PopIndent();
#>}
<# SkipIndent(); #>#line default
