#line 5 "D:\ws\QuickTemplates\Michaelis.QuickTemplates\CsTemplates\BaseClassCodeTemplate.tt"
using Michaelis.QuickTemplates.Meta;
#line 3 "D:\ws\QuickTemplates\Michaelis.QuickTemplates\CsTemplates\BaseClassCodeTemplate.tt"
using System;
#line 2 "D:\ws\QuickTemplates\Michaelis.QuickTemplates\CsTemplates\BaseClassCodeTemplate.tt"
using System.Collections.Generic;
#line 4 "D:\ws\QuickTemplates\Michaelis.QuickTemplates\CsTemplates\BaseClassCodeTemplate.tt"
using System.Linq;
#line default

namespace Michaelis.QuickTemplates.CsTemplates;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Michaelis.QuickTemplates", "0.0.0.0")]
internal partial class BaseClassCodeTemplate : CsBaseTemplate
{

    public void TransformText(
        TemplateSelector selector,
        BaseClassCodeNode bccn
        )
    {
#line hidden
        WriteNoBreakIndent("public ");
        WriteFormated(
#line 8 "D:\ws\QuickTemplates\Michaelis.QuickTemplates\CsTemplates\BaseClassCodeTemplate.tt"
       $"{(bccn.Classname)}");
#line hidden
        WriteNoBreakIndent("Context Context");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    get");
        WriteLine();
        WriteNoBreakIndent("    {");
        WriteLine();
        WriteNoBreakIndent("        if (null == _priv_Context)");
        WriteLine();
        WriteNoBreakIndent("        {");
        WriteLine();
        WriteNoBreakIndent("            _priv_Context = new ");
        WriteFormated(
#line 14 "D:\ws\QuickTemplates\Michaelis.QuickTemplates\CsTemplates\BaseClassCodeTemplate.tt"
                                $"{(bccn.Classname)}");
#line hidden
        WriteNoBreakIndent("Context();");
        WriteLine();
        WriteNoBreakIndent("        }");
        WriteLine();
        WriteNoBreakIndent("        return _priv_Context;");
        WriteLine();
        WriteNoBreakIndent("    }");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("    set");
        WriteLine();
        WriteNoBreakIndent("    {");
        WriteLine();
        WriteNoBreakIndent("        _priv_Context = value;");
        WriteLine();
        WriteNoBreakIndent("    }");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteNoBreakIndent("private ");
        WriteFormated(
#line 24 "D:\ws\QuickTemplates\Michaelis.QuickTemplates\CsTemplates\BaseClassCodeTemplate.tt"
        $"{(bccn.Classname)}");
#line hidden
        WriteNoBreakIndent("Context _priv_Context;");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("public static bool EndsWithNewLine(string text)");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    if (string.IsNullOrEmpty(text)) return false;");
        WriteLine();
        WriteNoBreakIndent("    return IsNewlineAtIndex(text, text.Length - 1);");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("public static bool IsNewlineAtIndex(global::System.ReadOnlySpan<char> text, int offset, out int len)");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    len = 0;");
        WriteLine();
        WriteNoBreakIndent("    if (offset >= text.Length) return false;");
        WriteLine();
        WriteNoBreakIndent("    var ch = text[offset];");
        WriteLine();
        WriteNoBreakIndent("    if (ch == \'\\r\' && offset + 1 < text.Length && text[offset + 1] == \'\\n\')");
        WriteLine();
        WriteNoBreakIndent("    {");
        WriteLine();
        WriteNoBreakIndent("        len = 2;");
        WriteLine();
        WriteNoBreakIndent("    }");
        WriteLine();
        WriteNoBreakIndent("    else if // as coded in unicode, except CR+LF case is above");
        WriteLine();
        WriteNoBreakIndent("        (ch == \'\\r\' // CR");
        WriteLine();
        WriteNoBreakIndent("        | ch == \'\\n\' // LF");
        WriteLine();
        WriteNoBreakIndent("        | ch == \'\\x000b\' // VT");
        WriteLine();
        WriteNoBreakIndent("        | ch == \'\\x000c\' // FF");
        WriteLine();
        WriteNoBreakIndent("        | ch == \'\\x0085\' // NEL");
        WriteLine();
        WriteNoBreakIndent("        | ch == \'\\x2028\' // LS");
        WriteLine();
        WriteNoBreakIndent("        | ch == \'\\x2029\' // PS");
        WriteLine();
        WriteNoBreakIndent("        )");
        WriteLine();
        WriteNoBreakIndent("    {");
        WriteLine();
        WriteNoBreakIndent("        len = 1;");
        WriteLine();
        WriteNoBreakIndent("    }");
        WriteLine();
        WriteNoBreakIndent("    return len > 0;");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("public static bool IsNewlineAtIndex(global::System.ReadOnlySpan<char> text, int index)");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    if (index >= text.Length) return false;");
        WriteLine();
        WriteNoBreakIndent("    switch (text[index])");
        WriteLine();
        WriteNoBreakIndent("    {");
        WriteLine();
        WriteNoBreakIndent("        case \'\\r\': // CR");
        WriteLine();
        WriteNoBreakIndent("        case \'\\n\': // LF");
        WriteLine();
        WriteNoBreakIndent("        case \'\\x000b\': // VT");
        WriteLine();
        WriteNoBreakIndent("        case \'\\x000c\': // FF");
        WriteLine();
        WriteNoBreakIndent("        case \'\\x0085\': // NEL");
        WriteLine();
        WriteNoBreakIndent("        case \'\\x2028\': // LS");
        WriteLine();
        WriteNoBreakIndent("        case \'\\x2029\': // PS");
        WriteLine();
        WriteNoBreakIndent("            return true;");
        WriteLine();
        WriteNoBreakIndent("        default:");
        WriteLine();
        WriteNoBreakIndent("            return false;");
        WriteLine();
        WriteNoBreakIndent("    }");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("public static bool IsNewlineAtIndex(string text, int index)");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    if (string.IsNullOrEmpty(text) || index >= text.Length) return false;");
        WriteLine();
        WriteNoBreakIndent("    switch (text[index])");
        WriteLine();
        WriteNoBreakIndent("    {");
        WriteLine();
        WriteNoBreakIndent("        case \'\\r\': // CR");
        WriteLine();
        WriteNoBreakIndent("        case \'\\n\': // LF");
        WriteLine();
        WriteNoBreakIndent("        case \'\\x000b\': // VT");
        WriteLine();
        WriteNoBreakIndent("        case \'\\x000c\': // FF");
        WriteLine();
        WriteNoBreakIndent("        case \'\\x0085\': // NEL");
        WriteLine();
        WriteNoBreakIndent("        case \'\\x2028\': // LS");
        WriteLine();
        WriteNoBreakIndent("        case \'\\x2029\': // PS");
        WriteLine();
        WriteNoBreakIndent("            return true;");
        WriteLine();
        WriteNoBreakIndent("        default:");
        WriteLine();
        WriteNoBreakIndent("            return false;");
        WriteLine();
        WriteNoBreakIndent("    }");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("protected void Write(string text)");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    if (text == null || text.Length == 0) return;");
        WriteLine();
        WriteNoBreakIndent("    if (Context.Writer == null) throw new global::System.InvalidOperationException(\"Context.Writer is not initialized\");");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("    global::System.ReadOnlySpan<char> textSpan = global::System.MemoryExtensions.AsSpan(text);");
        WriteLine();
        WriteNoBreakIndent("    int index = 0;");
        WriteLine();
        WriteNoBreakIndent("    int textStartIndex = 0;");
        WriteLine();
        WriteNoBreakIndent("    while (index < textSpan.Length)");
        WriteLine();
        WriteNoBreakIndent("    {");
        WriteLine();
        WriteNoBreakIndent("        if (IsNewlineAtIndex(textSpan, index, out int len))");
        WriteLine();
        WriteNoBreakIndent("        {");
        WriteLine();
        WriteNoBreakIndent("            if (index != textStartIndex) PutIndent();");
        WriteLine();
        WriteNoBreakIndent("            WriteParts(textSpan, textStartIndex, index + len);");
        WriteLine();
        WriteNoBreakIndent("            index += len;");
        WriteLine();
        WriteNoBreakIndent("            Context.EoL = true;");
        WriteLine();
        WriteNoBreakIndent("            textStartIndex = index;");
        WriteLine();
        WriteNoBreakIndent("        }");
        WriteLine();
        WriteNoBreakIndent("        else");
        WriteLine();
        WriteNoBreakIndent("        {");
        WriteLine();
        WriteNoBreakIndent("            index++;");
        WriteLine();
        WriteNoBreakIndent("        }");
        WriteLine();
        WriteNoBreakIndent("    }");
        WriteLine();
        WriteNoBreakIndent("    if (index != textStartIndex)");
        WriteLine();
        WriteNoBreakIndent("    {");
        WriteLine();
        WriteNoBreakIndent("        PutIndent();");
        WriteLine();
        WriteNoBreakIndent("        WriteParts(textSpan, textStartIndex, index);");
        WriteLine();
        WriteNoBreakIndent("        Context.EoL = false;");
        WriteLine();
        WriteNoBreakIndent("    }");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("private void WriteParts(global::System.ReadOnlySpan<char> textSpan, int offset1, int offset2)");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    Context.Writer.Write(textSpan.Slice(offset1, offset2 - offset1));");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("private void PutIndent()");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    if (Context.EoL)");
        WriteLine();
        WriteNoBreakIndent("    {");
        WriteLine();
        WriteNoBreakIndent("        foreach (var indent in System.Linq.Enumerable.Reverse(Context.Indents)) Context.Writer.Write(indent);");
        WriteLine();
        WriteNoBreakIndent("    }");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("protected void WriteNoBreakIndent(string text)");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    if (Context.Writer == null) throw new System.InvalidOperationException(\"Context.Writer is not initialized\");");
        WriteLine();
        WriteNoBreakIndent("    if (text == null || text.Length == 0) return;");
        WriteLine();
        WriteNoBreakIndent("    PutIndent();");
        WriteLine();
        WriteNoBreakIndent("    Context.Writer.Write(text);");
        WriteLine();
        WriteNoBreakIndent("    Context.EoL = false;");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("protected void WriteFormated(global::System.FormattableString text)");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    Write(text.ToString(Context.FormatProvider ?? global::System.Globalization.CultureInfo.CurrentUICulture));");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("protected void WriteLine()");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    if (Context.Writer == null) throw new System.InvalidOperationException(\"Context.Writer is not initialized\");");
        WriteLine();
        WriteNoBreakIndent("    Context.Writer.WriteLine();");
        WriteLine();
        WriteNoBreakIndent("    Context.EoL = true;");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("protected void WriteLine(string text)");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    Write(text);");
        WriteLine();
        WriteNoBreakIndent("    WriteLine();");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("protected void PushIndent(string indent)");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    Context.Indents.Push(indent);");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("protected string PopIndent()");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    return Context.Indents.Pop();");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
        WriteLine();
        WriteNoBreakIndent("protected void SkipIndent()");
        WriteLine();
        WriteNoBreakIndent("{");
        WriteLine();
        WriteNoBreakIndent("    Context.EoL = false;");
        WriteLine();
        WriteNoBreakIndent("}");
        WriteLine();
#line default

    }
}
