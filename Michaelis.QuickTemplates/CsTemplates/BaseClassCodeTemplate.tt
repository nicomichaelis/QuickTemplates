<#@ template Namespace="Michaelis.QuickTemplates.CsTemplates" Visibility="internal" Inherits="CsBaseTemplate" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Michaelis.QuickTemplates.Meta" #>
<#@ parameter name="selector" type="TemplateSelector" availability="method" required="true" #>
<#@ parameter name="bccn" type="BaseClassCodeNode" availability="method" required="true" #>
public <#= bccn.Classname #>Context Context
{
    get
    {
        if (null == _priv_Context)
        {
            _priv_Context = new <#= bccn.Classname #>Context();
        }
        return _priv_Context;
    }

    set
    {
        _priv_Context = value;
    }
}
private <#= bccn.Classname #>Context _priv_Context;

public static bool EndsWithNewLine(string text)
{
    if (string.IsNullOrEmpty(text)) return false;
    return IsNewlineAtIndex(text, text.Length - 1);
}

public static bool IsNewlineAtIndex(global::System.ReadOnlySpan<char> text, int offset, out int len)
{
    len = 0;
    if (offset >= text.Length) return false;
    var ch = text[offset];
    if (ch == '\r' && offset + 1 < text.Length && text[offset + 1] == '\n')
    {
        len = 2;
    }
    else if // as coded in unicode, except CR+LF case is above
        (ch == '\r' // CR
        | ch == '\n' // LF
        | ch == '\x000b' // VT
        | ch == '\x000c' // FF
        | ch == '\x0085' // NEL
        | ch == '\x2028' // LS
        | ch == '\x2029' // PS
        )
    {
        len = 1;
    }
    return len > 0;
}

public static bool IsNewlineAtIndex(global::System.ReadOnlySpan<char> text, int index)
{
    if (index >= text.Length) return false;
    switch (text[index])
    {
        case '\r': // CR
        case '\n': // LF
        case '\x000b': // VT
        case '\x000c': // FF
        case '\x0085': // NEL
        case '\x2028': // LS
        case '\x2029': // PS
            return true;
        default:
            return false;
    }
}

public static bool IsNewlineAtIndex(string text, int index)
{
    if (string.IsNullOrEmpty(text) || index >= text.Length) return false;
    switch (text[index])
    {
        case '\r': // CR
        case '\n': // LF
        case '\x000b': // VT
        case '\x000c': // FF
        case '\x0085': // NEL
        case '\x2028': // LS
        case '\x2029': // PS
            return true;
        default:
            return false;
    }
}

protected void Write(string text)
{
    if (text == null || text.Length == 0) return;
    if (Context.Writer == null) throw new global::System.InvalidOperationException("Context.Writer is not initialized");

    global::System.ReadOnlySpan<char> textSpan = global::System.MemoryExtensions.AsSpan(text);
    int index = 0;
    int textStartIndex = 0;
    while (index < textSpan.Length)
    {
        if (IsNewlineAtIndex(textSpan, index, out int len))
        {
            if (index != textStartIndex) PutIndent();
            WriteParts(textSpan, textStartIndex, index + len);
            index += len;
            Context.EoL = true;
            textStartIndex = index;
        }
        else
        {
            index++;
        }
    }
    if (index != textStartIndex)
    {
        PutIndent();
        WriteParts(textSpan, textStartIndex, index);
        Context.EoL = false;
    }
}

private void WriteParts(global::System.ReadOnlySpan<char> textSpan, int offset1, int offset2)
{
    Context.Writer.Write(textSpan.Slice(offset1, offset2 - offset1));
}

private void PutIndent()
{
    if (Context.EoL)
    {
        foreach (var indent in System.Linq.Enumerable.Reverse(Context.Indents)) Context.Writer.Write(indent);
    }
}

protected void WriteNoBreakIndent(string text)
{
    if (Context.Writer == null) throw new System.InvalidOperationException("Context.Writer is not initialized");
    if (text == null || text.Length == 0) return;
    PutIndent();
    Context.Writer.Write(text);
    Context.EoL = false;
}

protected void WriteFormated(global::System.FormattableString text)
{
    Write(text.ToString(Context.FormatProvider ?? global::System.Globalization.CultureInfo.CurrentUICulture));
}

protected void WriteLine()
{
    if (Context.Writer == null) throw new System.InvalidOperationException("Context.Writer is not initialized");
    Context.Writer.WriteLine();
    Context.EoL = true;
}

protected void WriteLine(string text)
{
    Write(text);
    WriteLine();
}

protected void PushIndent(string indent)
{
    Context.Indents.Push(indent);
}

protected string PopIndent()
{
    return Context.Indents.Pop();
}

protected void SkipIndent()
{
    Context.EoL = false;
}
